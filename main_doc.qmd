---
title: "main_doc"
format: html
editor: visual
---
# Updates 
  * Jackknife likely struggling since statistic is non-smooth. 
    * Two options: 
      * Drop-d jackknife -> Extremely computationally expensive
      * Work with the resulting distributions for better estimates. 
      

# Dependencies

```{r, message=FALSE}
library(mice)
library(MASS)
library(furrr)
library(purrr)
library(tidyverse)
library(parallel)
```

# Data Simulation

## Defining data simulation function

```{r}
data_generator <- function(sample_size, seed, prop, desired_data){
  set.seed(seed)
  cor_mat <- matrix(c(1, 0.5, 0.5, 
                      0.5, 1, 0.5, 
                      0.5, 0.5, 1), nrow = 3, ncol = 3)
  
  mean_vec <- c(1, 1, 1)
  
  covariates <- as.data.frame(mvrnorm(sample_size, mu = mean_vec, Sigma = cor_mat))
  covariates$V3 <- ifelse(covariates$V3 > 0, 1, 0)
  
  outcome_variable <- 4 + 
    2*covariates$V1 + 
    5*covariates$V2 +  
    8*covariates$V3 +
    rnorm(sample_size, 0, 1)
  
  data_complete <- cbind(outcome_variable, covariates)
  data_complete$V3 <- as.factor(data_complete$V3)
  
  data_w_missing <- suppressWarnings(ampute(data_complete, prop = prop, mech = "MAR", patterns = c(0, 1, 1, 1))$amp)
  
  data_w_missing$V3 <- as.factor(ifelse(data_w_missing$V3 == 1, 0, 1))
  
  return(get(desired_data))
}
```

## Creating data for simulation

```{r, eval = FALSE}
set.seed(971423)
N = 100
sample_size = 1000
seed = 1:N
prop = 0.3
desired_data = "data_w_missing"

# Create list of data frames with missing 
cl <- makeCluster(3)

list_of_sim_data <- mclapply(mc.cores = 3, seed, function(x) data_generator(sample_size, x, prop, desired_data))

stopCluster(cl)
```

# Estimator Code

```{r}
df_w_mis <- list_of_sim_data[[10]]

uncon_pred_mat <- make.predictorMatrix(df_w_mis)

uncon_pred_mat[,4] <- 0

jackknife_estimator <- function(df_w_mis){
# Creates n subsamples of n = n-1 
subsamples <- vector("list", nrow(df_w_mis))
for(i in 1:nrow(df_w_mis)){
  subsamples[[i]] <- df_w_mis[-i,]}

contains_na <- map_lgl(subsamples, ~any(is.na(.x)))

for(i in 1:length(subsamples)){
  if(contains_na[[i]] == TRUE){
    subsamples[[i]] <- mice(subsamples[[i]], seed = 123, m = 2, method = "norm.boot", 
                            print=FALSE, maxit = 1, predictorMatrix = uncon_pred_mat)
  } else{
    subsamples[[i]] <- subsamples[[i]]
  }
}

# Logical test to determine presence of MICE objects 
is_mice <- vector("logical", length = length(subsamples))

for(i in 1:length(subsamples)){
  is_mice[[i]] <- ifelse(class(subsamples[[i]]) == "mids", TRUE, FALSE)
}

# Applies appt analysis depending on type 
analysis_vector <- vector("numeric", length = length(subsamples))

for(i in 1:length(subsamples)){
  sample_size <- nrow(complete(subsamples[[i]],1))
  if(is_mice[[i]] == TRUE){
    analysis_vector[[i]] <- subsamples[[i]] %>%
      mice::complete("long") %>%
      lm(outcome_variable ~ V1 + V2 + V3, data = .) %>%
      summary() %>%
      broom::tidy() %>%
      dplyr::filter(term == "V1") %>%
      dplyr::select(estimate) %>%
      unlist()
  } else{
    analysis_vector[[i]] <- subsamples[[i]] %>%
      lm(formula = outcome_variable ~ V1 + V2 + V3, data = .) %>%
      summary() %>%
      broom::tidy() %>%
      dplyr::filter(term == "V1") %>%
      dplyr::select(estimate) %>%
      unlist()
  }
  
}

# Jackknife point estimate
jittered_analysis_vector <- jitter(analysis_vector, factor = 10000)
point_estimate_jackknife <- mean(jittered_analysis_vector)

# Quantile CI
UB <- quantile(jittered_analysis_vector, 0.975)
LB <- quantile(jittered_analysis_vector, 0.025)

return(data.frame("point_estimate" = point_estimate_jackknife, 
                 "UB" = UB, 
                 "LB" = LB) %>% tibble::remove_rownames())

}
```

# Small Monte Carlo for Jackknife Estimator

```{r}
# Singular test run 

# Jackknife is stated to work better with small samples, maybe we should focus on that. 

# I think jackknife is struggling because the test statistic is non-smooth (values vary widely between any given two jackknife subsamples, we could look into drop-d-jackknife, but the number of combinations would be too high (n choose k) Look into other methods)
jackknife_estimator(df_w_mis)
```

## Unix

```{r}
cl <- makeCluster(3)

jackknife_var_est <- mclapply(mc.cores = 3, list_of_sim_data[1:10], function(x) jackknife_estimator(x))

stopCluster(cl)

jackknife_var_estimates <- do.call(rbind, jackknife_var_est) %>%
  as.data.frame()
```

## Windows

```{r}
library(future.apply)
plan(multisession)

jackknife_var_est <- future_lapply(list_of_sim_data, function(x) jackknife_estimator(x), future.seed=TRUE)
```

# Small Monte Carlo for Rubin's Rules

```{r, eval = FALSE}
# If using windows, modify using code above 

cl <- makeCluster(3)

rubin_var_estimates <- mclapply(mc.cores = 3,list_of_sim_data[1:10], function(x) 
  mice(x, seed = 123, print = FALSE, method = "pmm", m = 2, maxit = 5,  predictorMatrix = uncon_pred_mat) %>%
    mice::complete("long") %>%
    group_by(.imp) %>%
    do(model = lm(outcome_variable ~ V1 + V2 + V3, data = .)) %>%
    as.list() %>%
    .[[-1]] %>%
    pool() %>%
    summary(conf.int = TRUE) %>%
    as.data.frame() %>%
    dplyr::filter(term == "V1") %>%
    dplyr::select(c(estimate, "2.5 %", "97.5 %")) %>%
    dplyr::rename(point_estimate_rub = estimate, 
                  LB_rub = "2.5 %", 
                  UB_rub = "97.5 %"))
stopCluster(cl)

rubin_var_estimates <- do.call(rbind, rubin_var_estimates) %>%
  as.data.frame()

round((sum(2 < rubin_var_estimates$UB_rub & 2 > rubin_var_estimates$LB_rub) / nrow(rubin_var_estimates))*100,2)
```

# Organizing Results

```{r}
jackknife_estimate <- do.call(rbind,jackknife_var_est)

combined_results <- cbind(true_var = 2, rubin_var_estimates, jackknife_estimate)
```

# Analysis of Results

```{r}
round((sum(combined_results$true_var < combined_results$UB & combined_results$true_var > combined_results$LB) / nrow(combined_results))*100,2)

reshape2::melt(combined_results[c("point_estimate_rub", "point_estimate")]) %>%
  ggplot(data = .,
         aes(x = value, fill = variable, color = variable)) + 
  geom_density(aes(y = ..density..), alpha = 0.25) + 
  theme(axis.title.y = element_blank(), 
        panel.spacing=unit(1.5,"lines")) + 
  theme_bw() + 
  theme(axis.title.y = element_blank(), 
        panel.spacing=unit(1.5,"lines"), 
        strip.text = element_text(
          size = 9)) + 
  xlab("Beta_hat_1")

combined_results %>%
  mutate("jackknife_bias" = point_estimate - 0.2, 
         "rubin_bias" = point_estimate_rub - 0.2) %>%
  dplyr::select("jackknife_bias", "rubin_bias") %>%
  reshape2::melt() %>%
  ggplot(data = .,
         aes(x = value, fill = variable, color = variable)) + 
  geom_density(aes(y = ..density..), alpha = 0.25) + 
  theme(axis.title.y = element_blank(), 
        panel.spacing=unit(1.5,"lines")) + 
  theme_bw() + 
  theme(axis.title.y = element_blank(), 
        panel.spacing=unit(1.5,"lines"), 
        strip.text = element_text(
          size = 9)) + 
  xlab("Bias of the Jackknife Estimator")

ggplot(combined_results, aes(x = c(1:nrow(combined_results)))) + 
      geom_point(aes(y = point_estimate, color = "red")) +
      geom_point(aes(y = 0.2, alpha = 0.1)) + 
      geom_errorbar(aes(ymin = LB, ymax = UB, alpha = 1)) + 
      coord_flip() + 
      theme_bw() + 
      labs(
        x = latex2exp::TeX("$i^{th} dataset"), 
        y = latex2exp::TeX("$\\widehat{\\sigma^2}")
      ) + 
      theme(legend.position="none") + 
      geom_hline(yintercept = combined_results$true_var)
```
